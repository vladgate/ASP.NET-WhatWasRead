@model CreateEditBookViewModel

<div class="details-left-side-panel">
    <div class="form-group">
       @Html.ValidationMessageFor(model=>model.ImageData)
        <div style="position:relative;">
            <a class='btn' href='javascript:;'>
                Выбрать обложку...
                <input type="file" name="Image" accept=".jpg, .jpeg, .png" style="position:absolute;z-index:2;top:0;left:0;filter: alpha(opacity=0); opacity:0;background-color:transparent;color:transparent;"
                       onchange="readURL(this);" />
            </a>
            <span class='label label-info' id="upload-file-info"></span>
        </div>
        <div>
            @{
                if (Model.ImageData != null)
                {
                    string base64 = Convert.ToBase64String(Model.ImageData);
                    string imgSrc = String.Format("data:image/jpg;base64,{0}", base64);
                    <img class="img-thumbnail" id="img-thumbnail" name="ImageData" width="152" height="215" alt="No image" src="@imgSrc" />
                        <span>
                            @Html.HiddenFor(x => x.ImageData)
                            @Html.HiddenFor(x => x.ImageMimeType)
                        </span>
                }
                else
                {
                    <img class="img-thumbnail" id="img-thumbnail" name="ImageData" width="152" height="215" alt="No image"/>
                }
            }
        </div>
    </div>
</div>

<div class="details-rigth-side-panel">
    <div class="form-horizontal" style="height:auto">
        @Html.HiddenFor(model => model.BookId)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, "Название:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "Введите название", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Authors, "Авторы:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-2">
                @Html.ListBoxFor(x => x.SelectedAuthors, Model.Authors, new { @class = "form-control", size = 10 })
                @Html.ValidationMessageFor(model => model.SelectedAuthors, "Выберите хотя бы одного автора", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Pages, "Количество страниц:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-1">
                @Html.EditorFor(model => model.Pages, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Pages, "Укажите количество страниц", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Year, "Год издания:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-1">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "Укажите корректный год издания", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, "Описание:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", style = "height:150px" } })
                @Html.ValidationMessageFor(model => model.Description, "Введите описание", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LanguageId, "Язык:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-2">
                @Html.DropDownList("LanguageId", (IEnumerable<SelectListItem>)ViewBag.Languages, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LanguageId, "Выберите язык", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, "Категория:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-2">
                @Html.DropDownList("CategoryId", (IEnumerable<SelectListItem>)ViewBag.Categories, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "Выберите категорию", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tags, "Teги:", htmlAttributes: new { @class = "book-details-label" })
            <div class="col-md-2">
                @Html.ListBoxFor(x => x.SelectedTags, Model.Tags, new { @class = "form-control", size = 10 })
            </div>
        </div>

    </div>
</div>

<div class="form-group">
    <div class="col-md-offset-2 col-md-10">
        <input type="submit" value="Сохранить" class="btn btn-primary" />
    </div>
</div>
                    }

<script>
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#img-thumbnail')
                    .attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>
